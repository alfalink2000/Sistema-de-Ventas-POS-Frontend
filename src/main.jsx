// src/main.jsx - VERSI√ìN COMPLETA CON SINCRONIZACI√ìN AUTOM√ÅTICA
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { Provider } from "react-redux";
import { store } from "./store/store";
import App from "./App.jsx";
import "./index.css";
import SyncController from "./controllers/offline/SyncController/SyncController";

// ‚úÖ REGISTRO SEGURO DEL SERVICE WORKER
const registerServiceWorker = async () => {
  if ("serviceWorker" in navigator) {
    try {
      // Solo registrar en producci√≥n o si est√° expl√≠citamente habilitado
      const shouldRegisterSW =
        import.meta.env.PROD || import.meta.env.VITE_ENABLE_SW === "true";

      if (shouldRegisterSW) {
        const registration = await navigator.serviceWorker.register("/sw.js", {
          scope: "/",
          updateViaCache: "none",
        });

        console.log("‚úÖ Service Worker registrado:", registration);

        // Manejar actualizaciones
        registration.addEventListener("updatefound", () => {
          const newWorker = registration.installing;
          if (newWorker) {
            newWorker.addEventListener("statechange", () => {
              console.log("üì± Estado del SW:", newWorker.state);
              if (
                newWorker.state === "installed" &&
                navigator.serviceWorker.controller
              ) {
                console.log("üîÑ Nuevo contenido disponible");
              }
            });
          }
        });

        // Manejar cambios de controlador
        navigator.serviceWorker.addEventListener("controllerchange", () => {
          console.log("üîÑ Controller cambiado - recargando p√°gina");
          window.location.reload();
        });
      } else {
        console.log("‚ÑπÔ∏è Service Worker deshabilitado en desarrollo");

        // Desregistrar cualquier SW existente en desarrollo
        const registrations = await navigator.serviceWorker.getRegistrations();
        for (let registration of registrations) {
          await registration.unregister();
          console.log("üóëÔ∏è Service Worker desregistrado para desarrollo");
        }
      }
    } catch (error) {
      console.log("‚ö†Ô∏è Service Worker no registrado:", error.message);
      // No es cr√≠tico - la app funciona sin SW
    }
  } else {
    console.log("üì± Service Worker no soportado");
  }
};

// ‚úÖ VERIFICACI√ìN PWA MEJORADA
const checkPWAStatus = () => {
  console.log("PWA Check:");
  console.log("- HTTPS:", window.location.protocol === "https:");
  console.log("- Service Worker:", "serviceWorker" in navigator);
  console.log("- BeforeInstallPrompt:", "BeforeInstallPromptEvent" in window);
  console.log(
    "- Display Mode:",
    window.matchMedia("(display-mode: standalone)").matches
      ? "standalone"
      : "browser"
  );
};

// ‚úÖ SINCRONIZACI√ìN AUTOM√ÅTICA AL DETECTAR INTERNET
const setupAutoSync = () => {
  console.log("üîÑ Configurando sincronizaci√≥n autom√°tica...");

  const handleOnline = async () => {
    console.log("üåê EVENTO: Conexi√≥n a internet detectada - Main");

    // Peque√±o delay para asegurar que la conexi√≥n sea estable
    setTimeout(async () => {
      try {
        console.log("üîÑ Iniciando sincronizaci√≥n autom√°tica desde Main...");

        // Verificar si hay datos pendientes antes de sincronizar
        const syncStatus = await SyncController.getSyncStatus();

        if (syncStatus.totalPending === 0) {
          console.log("‚úÖ No hay datos pendientes para sincronizar");
          return;
        }

        console.log(
          `üìä Datos pendientes encontrados: ${syncStatus.totalPending}`
        );
        console.log(`- Sesiones: ${syncStatus.pendingSessions}`);
        console.log(`- Ventas: ${syncStatus.pendingSales}`);
        console.log(`- Cierres: ${syncStatus.pendingClosures}`);

        // Ejecutar sincronizaci√≥n autom√°tica
        const result = await SyncController.autoSyncOnConnection();

        if (result.success) {
          console.log("‚úÖ Sincronizaci√≥n autom√°tica completada:", {
            sesiones: result.sessions?.success || 0,
            ventas: result.sales?.success || 0,
            cierres: result.closures?.success || 0,
            total: result.totalProcessed || 0,
          });
        } else {
          console.error("‚ùå Error en sincronizaci√≥n autom√°tica:", result.error);
        }
      } catch (error) {
        console.error("‚ùå Error en auto-sync despu√©s de conexi√≥n:", error);
      }
    }, 3000); // 3 segundos de delay para conexi√≥n estable
  };

  // Verificar si ya hay conexi√≥n al cargar la aplicaci√≥n
  const checkInitialConnection = async () => {
    if (navigator.onLine) {
      console.log(
        "üîç Aplicaci√≥n cargada con conexi√≥n - verificando sincronizaci√≥n..."
      );

      // Delay m√°s largo para que la app termine de cargar completamente
      setTimeout(async () => {
        try {
          const syncStatus = await SyncController.getSyncStatus();
          if (syncStatus.totalPending > 0) {
            console.log(
              `üîÑ Datos pendientes encontrados al cargar: ${syncStatus.totalPending}`
            );
            await SyncController.autoSyncOnConnection();
          } else {
            console.log("‚úÖ No hay datos pendientes al cargar la aplicaci√≥n");
          }
        } catch (error) {
          console.error("‚ùå Error en sync inicial:", error);
        }
      }, 8000); // 8 segundos despu√©s de cargar la app
    }
  };

  // Configurar event listener
  window.addEventListener("online", handleOnline);

  // Ejecutar verificaci√≥n inicial
  checkInitialConnection();

  // Retornar funci√≥n para limpiar el listener
  return () => {
    window.removeEventListener("online", handleOnline);
    console.log("üßπ Listeners de sincronizaci√≥n autom√°tica limpiados");
  };
};

// ‚úÖ INICIALIZACI√ìN SEGURA
const initializeApp = async () => {
  try {
    console.log("üöÄ Iniciando aplicaci√≥n KioskoFlow...");

    // Verificar estado PWA
    checkPWAStatus();

    // Registrar Service Worker (manera segura)
    await registerServiceWorker();

    // Configurar sincronizaci√≥n autom√°tica
    const cleanupSync = setupAutoSync();

    // Renderizar la aplicaci√≥n
    createRoot(document.getElementById("root")).render(
      <StrictMode>
        <Provider store={store}>
          <App />
        </Provider>
      </StrictMode>
    );

    console.log("‚úÖ Aplicaci√≥n iniciada correctamente");

    // Manejar limpieza al desmontar (aunque en main.jsx esto es raro)
    return () => {
      cleanupSync();
    };
  } catch (error) {
    console.error("‚ùå Error iniciando aplicaci√≥n:", error);

    // Fallback: renderizar sin sincronizaci√≥n autom√°tica
    createRoot(document.getElementById("root")).render(
      <StrictMode>
        <Provider store={store}>
          <App />
        </Provider>
      </StrictMode>
    );
  }
};

// Iniciar la aplicaci√≥n
initializeApp();
